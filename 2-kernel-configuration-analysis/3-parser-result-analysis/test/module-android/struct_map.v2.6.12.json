{
    "Big_A": {
        "name": "Big_A",
        "struct_def": "struct module {	enum module_state state;		struct list_head list;		char name[MODULE_NAME_LEN];		struct module_kobject mkobj;	struct module_attribute *modinfo_attrs;	const char *version;	const char *srcversion;	const char *scmversion;	struct kobject *holders_dir;		const struct kernel_symbol *syms;	const s32 *crcs;	unsigned int num_syms;#ifdef CONFIG_CFI_CLANG	cfi_check_fn cfi_check;#endif	#ifdef CONFIG_SYSFS	struct mutex param_lock;#endif	struct kernel_param *kp;	unsigned int num_kp;		unsigned int num_gpl_syms;	const struct kernel_symbol *gpl_syms;	const s32 *gpl_crcs;	bool using_gplonly_symbols;#ifdef CONFIG_UNUSED_SYMBOLS		const struct kernel_symbol *unused_syms;	const s32 *unused_crcs;	unsigned int num_unused_syms;		unsigned int num_unused_gpl_syms;	const struct kernel_symbol *unused_gpl_syms;	const s32 *unused_gpl_crcs;#endif		bool sig_ok;	bool async_probe_requested;		const struct kernel_symbol *gpl_future_syms;	const s32 *gpl_future_crcs;	unsigned int num_gpl_future_syms;		unsigned int num_exentries;	struct exception_table_entry *extable;		int (*init)(void);		struct module_layout core_layout __module_layout_align;	struct module_layout init_layout;		struct mod_arch_specific arch;	unsigned long taints;	#ifdef CONFIG_GENERIC_BUG		unsigned num_bugs;	struct list_head bug_list;	struct bug_entry *bug_table;#endif#ifdef CONFIG_KALLSYMS		struct mod_kallsyms __rcu *kallsyms;	struct mod_kallsyms core_kallsyms;		struct module_sect_attrs *sect_attrs;		struct module_notes_attrs *notes_attrs;#endif		char *args;#ifdef CONFIG_SMP		void __percpu *percpu;	unsigned int percpu_size;#endif	void *noinstr_text_start;	unsigned int noinstr_text_size;#ifdef CONFIG_TRACEPOINTS	unsigned int num_tracepoints;	tracepoint_ptr_t *tracepoints_ptrs;#endif#ifdef CONFIG_TREE_SRCU	unsigned int num_srcu_structs;	struct srcu_struct **srcu_struct_ptrs;#endif#ifdef CONFIG_BPF_EVENTS	unsigned int num_bpf_raw_events;	struct bpf_raw_event_map *bpf_raw_events;#endif#ifdef CONFIG_JUMP_LABEL	struct jump_entry *jump_entries;	unsigned int num_jump_entries;#endif#ifdef CONFIG_TRACING	unsigned int num_trace_bprintk_fmt;	const char **trace_bprintk_fmt_start;#endif#ifdef CONFIG_EVENT_TRACING	struct trace_event_call **trace_events;	unsigned int num_trace_events;	struct trace_eval_map **trace_evals;	unsigned int num_trace_evals;#endif#ifdef CONFIG_FTRACE_MCOUNT_RECORD	unsigned int num_ftrace_callsites;	unsigned long *ftrace_callsites;#endif#ifdef CONFIG_KPROBES	void *kprobes_text_start;	unsigned int kprobes_text_size;	unsigned long *kprobe_blacklist;	unsigned int num_kprobe_blacklist;#endif#ifdef CONFIG_HAVE_STATIC_CALL_INLINE	int num_static_call_sites;	struct static_call_site *static_call_sites;#endif#ifdef CONFIG_LIVEPATCH	bool klp; 	bool klp_alive;		struct klp_modinfo *klp_info;#endif#ifdef CONFIG_MODULE_UNLOAD		struct list_head source_list;		struct list_head target_list;		void (*exit)(void);	atomic_t refcnt;#endif#ifdef CONFIG_CONSTRUCTORS		ctor_fn_t *ctors;	unsigned int num_ctors;#endif#ifdef CONFIG_FUNCTION_ERROR_INJECTION	struct error_injection_entry *ei_funcs;	unsigned int num_ei_funcs;#endif}"
    }
}